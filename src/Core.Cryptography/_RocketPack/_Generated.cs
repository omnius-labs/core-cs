// <auto-generated/>
#nullable enable

namespace Core.Cryptography;

public enum OmniHashAlgorithmType : byte
{
    Unknown = 0,
    Sha2_256 = 1,
}
public enum OmniAgreementAlgorithmType : byte
{
    Unknown = 0,
    EcDh_P521_Sha2_256 = 1,
}
public enum OmniDigitalSignatureAlgorithmType : byte
{
    Unknown = 0,
    EcDsa_P521_Sha2_256 = 1,
}
public enum OmniHashcashAlgorithmType : byte
{
    Unknown = 0,
    Sha2_256 = 1,
}
public readonly partial struct OmniHash : global::Core.RocketPack.IRocketMessage<global::Core.Cryptography.OmniHash>
{
    public static global::Core.RocketPack.IRocketMessageFormatter<global::Core.Cryptography.OmniHash> Formatter => global::Core.RocketPack.IRocketMessage<global::Core.Cryptography.OmniHash>.Formatter;
    public static global::Core.Cryptography.OmniHash Empty => global::Core.RocketPack.IRocketMessage<global::Core.Cryptography.OmniHash>.Empty;

    static OmniHash()
    {
        global::Core.RocketPack.IRocketMessage<global::Core.Cryptography.OmniHash>.Formatter = new ___CustomFormatter();
        global::Core.RocketPack.IRocketMessage<global::Core.Cryptography.OmniHash>.Empty = new global::Core.Cryptography.OmniHash((global::Core.Cryptography.OmniHashAlgorithmType)0, global::System.ReadOnlyMemory<byte>.Empty);
    }

    private readonly int ___hashCode;

    public static readonly int MaxValueLength = 256;

    public OmniHash(global::Core.Cryptography.OmniHashAlgorithmType algorithmType, global::System.ReadOnlyMemory<byte> value)
    {
        if (value.Length > 256) throw new global::System.ArgumentOutOfRangeException("value");

        this.AlgorithmType = algorithmType;
        this.Value = value;

        {
            var ___h = new global::System.HashCode();
            if (algorithmType != default) ___h.Add(algorithmType.GetHashCode());
            if (!value.IsEmpty) ___h.Add(global::Core.Base.Helpers.ObjectHelper.GetHashCode(value.Span));
            ___hashCode = ___h.ToHashCode();
        }
    }

    public global::Core.Cryptography.OmniHashAlgorithmType AlgorithmType { get; }
    public global::System.ReadOnlyMemory<byte> Value { get; }

    public static global::Core.Cryptography.OmniHash Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Core.Base.IBytesPool bytesPool)
    {
        var reader = new global::Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Core.Base.IBytesPool bytesPool)
    {
        var writer = new global::Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Core.Cryptography.OmniHash left, global::Core.Cryptography.OmniHash right)
    {
        return right.Equals(left);
    }
    public static bool operator !=(global::Core.Cryptography.OmniHash left, global::Core.Cryptography.OmniHash right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Core.Cryptography.OmniHash) return false;
        return this.Equals((global::Core.Cryptography.OmniHash)other);
    }
    public bool Equals(global::Core.Cryptography.OmniHash target)
    {
        if (this.AlgorithmType != target.AlgorithmType) return false;
        if (!global::Core.Base.BytesOperations.Equals(this.Value.Span, target.Value.Span)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode;

    private sealed class ___CustomFormatter : global::Core.RocketPack.IRocketMessageFormatter<global::Core.Cryptography.OmniHash>
    {
        public void Serialize(ref global::Core.RocketPack.RocketMessageWriter w, scoped in global::Core.Cryptography.OmniHash value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            w.Write((ulong)value.AlgorithmType);
            w.Write(value.Value.Span);
        }
        public global::Core.Cryptography.OmniHash Deserialize(ref global::Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Core.Cryptography.OmniHashAlgorithmType p_algorithmType = (global::Core.Cryptography.OmniHashAlgorithmType)0;
            global::System.ReadOnlyMemory<byte> p_value = global::System.ReadOnlyMemory<byte>.Empty;

            {
                p_algorithmType = (global::Core.Cryptography.OmniHashAlgorithmType)r.GetUInt64();
            }
            {
                p_value = r.GetMemory(256);
            }
            return new global::Core.Cryptography.OmniHash(p_algorithmType, p_value);
        }
    }
}
public sealed partial class OmniAgreement : global::Core.RocketPack.IRocketMessage<global::Core.Cryptography.OmniAgreement>
{
    public static global::Core.RocketPack.IRocketMessageFormatter<global::Core.Cryptography.OmniAgreement> Formatter => global::Core.RocketPack.IRocketMessage<global::Core.Cryptography.OmniAgreement>.Formatter;
    public static global::Core.Cryptography.OmniAgreement Empty => global::Core.RocketPack.IRocketMessage<global::Core.Cryptography.OmniAgreement>.Empty;

    static OmniAgreement()
    {
        global::Core.RocketPack.IRocketMessage<global::Core.Cryptography.OmniAgreement>.Formatter = new ___CustomFormatter();
        global::Core.RocketPack.IRocketMessage<global::Core.Cryptography.OmniAgreement>.Empty = new global::Core.Cryptography.OmniAgreement(global::Core.RocketPack.Timestamp64.Zero, (global::Core.Cryptography.OmniAgreementAlgorithmType)0, global::System.ReadOnlyMemory<byte>.Empty, global::System.ReadOnlyMemory<byte>.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxPublicKeyLength = 8192;
    public static readonly int MaxPrivateKeyLength = 8192;

    public OmniAgreement(global::Core.RocketPack.Timestamp64 createdTime, global::Core.Cryptography.OmniAgreementAlgorithmType algorithmType, global::System.ReadOnlyMemory<byte> publicKey, global::System.ReadOnlyMemory<byte> privateKey)
    {
        if (publicKey.Length > 8192) throw new global::System.ArgumentOutOfRangeException("publicKey");
        if (privateKey.Length > 8192) throw new global::System.ArgumentOutOfRangeException("privateKey");

        this.CreatedTime = createdTime;
        this.AlgorithmType = algorithmType;
        this.PublicKey = publicKey;
        this.PrivateKey = privateKey;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (createdTime != default) ___h.Add(createdTime.GetHashCode());
            if (algorithmType != default) ___h.Add(algorithmType.GetHashCode());
            if (!publicKey.IsEmpty) ___h.Add(global::Core.Base.Helpers.ObjectHelper.GetHashCode(publicKey.Span));
            if (!privateKey.IsEmpty) ___h.Add(global::Core.Base.Helpers.ObjectHelper.GetHashCode(privateKey.Span));
            return ___h.ToHashCode();
        });
    }

    public global::Core.RocketPack.Timestamp64 CreatedTime { get; }
    public global::Core.Cryptography.OmniAgreementAlgorithmType AlgorithmType { get; }
    public global::System.ReadOnlyMemory<byte> PublicKey { get; }
    public global::System.ReadOnlyMemory<byte> PrivateKey { get; }

    public static global::Core.Cryptography.OmniAgreement Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Core.Base.IBytesPool bytesPool)
    {
        var reader = new global::Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Core.Base.IBytesPool bytesPool)
    {
        var writer = new global::Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Core.Cryptography.OmniAgreement? left, global::Core.Cryptography.OmniAgreement? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Core.Cryptography.OmniAgreement? left, global::Core.Cryptography.OmniAgreement? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Core.Cryptography.OmniAgreement) return false;
        return this.Equals((global::Core.Cryptography.OmniAgreement)other);
    }
    public bool Equals(global::Core.Cryptography.OmniAgreement? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.CreatedTime != target.CreatedTime) return false;
        if (this.AlgorithmType != target.AlgorithmType) return false;
        if (!global::Core.Base.BytesOperations.Equals(this.PublicKey.Span, target.PublicKey.Span)) return false;
        if (!global::Core.Base.BytesOperations.Equals(this.PrivateKey.Span, target.PrivateKey.Span)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Core.RocketPack.IRocketMessageFormatter<global::Core.Cryptography.OmniAgreement>
    {
        public void Serialize(ref global::Core.RocketPack.RocketMessageWriter w, scoped in global::Core.Cryptography.OmniAgreement value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.CreatedTime != global::Core.RocketPack.Timestamp64.Zero)
            {
                w.Write((uint)1);
                w.Write(value.CreatedTime);
            }
            if (value.AlgorithmType != (global::Core.Cryptography.OmniAgreementAlgorithmType)0)
            {
                w.Write((uint)2);
                w.Write((ulong)value.AlgorithmType);
            }
            if (!value.PublicKey.IsEmpty)
            {
                w.Write((uint)3);
                w.Write(value.PublicKey.Span);
            }
            if (!value.PrivateKey.IsEmpty)
            {
                w.Write((uint)4);
                w.Write(value.PrivateKey.Span);
            }
            w.Write((uint)0);
        }
        public global::Core.Cryptography.OmniAgreement Deserialize(ref global::Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Core.RocketPack.Timestamp64 p_createdTime = global::Core.RocketPack.Timestamp64.Zero;
            global::Core.Cryptography.OmniAgreementAlgorithmType p_algorithmType = (global::Core.Cryptography.OmniAgreementAlgorithmType)0;
            global::System.ReadOnlyMemory<byte> p_publicKey = global::System.ReadOnlyMemory<byte>.Empty;
            global::System.ReadOnlyMemory<byte> p_privateKey = global::System.ReadOnlyMemory<byte>.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_createdTime = r.GetTimestamp64();
                            break;
                        }
                    case 2:
                        {
                            p_algorithmType = (global::Core.Cryptography.OmniAgreementAlgorithmType)r.GetUInt64();
                            break;
                        }
                    case 3:
                        {
                            p_publicKey = r.GetMemory(8192);
                            break;
                        }
                    case 4:
                        {
                            p_privateKey = r.GetMemory(8192);
                            break;
                        }
                }
            }

            return new global::Core.Cryptography.OmniAgreement(p_createdTime, p_algorithmType, p_publicKey, p_privateKey);
        }
    }
}
public sealed partial class OmniAgreementPublicKey : global::Core.RocketPack.IRocketMessage<global::Core.Cryptography.OmniAgreementPublicKey>
{
    public static global::Core.RocketPack.IRocketMessageFormatter<global::Core.Cryptography.OmniAgreementPublicKey> Formatter => global::Core.RocketPack.IRocketMessage<global::Core.Cryptography.OmniAgreementPublicKey>.Formatter;
    public static global::Core.Cryptography.OmniAgreementPublicKey Empty => global::Core.RocketPack.IRocketMessage<global::Core.Cryptography.OmniAgreementPublicKey>.Empty;

    static OmniAgreementPublicKey()
    {
        global::Core.RocketPack.IRocketMessage<global::Core.Cryptography.OmniAgreementPublicKey>.Formatter = new ___CustomFormatter();
        global::Core.RocketPack.IRocketMessage<global::Core.Cryptography.OmniAgreementPublicKey>.Empty = new global::Core.Cryptography.OmniAgreementPublicKey(global::Core.RocketPack.Timestamp64.Zero, (global::Core.Cryptography.OmniAgreementAlgorithmType)0, global::System.ReadOnlyMemory<byte>.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxPublicKeyLength = 8192;

    public OmniAgreementPublicKey(global::Core.RocketPack.Timestamp64 createdTime, global::Core.Cryptography.OmniAgreementAlgorithmType algorithmType, global::System.ReadOnlyMemory<byte> publicKey)
    {
        if (publicKey.Length > 8192) throw new global::System.ArgumentOutOfRangeException("publicKey");

        this.CreatedTime = createdTime;
        this.AlgorithmType = algorithmType;
        this.PublicKey = publicKey;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (createdTime != default) ___h.Add(createdTime.GetHashCode());
            if (algorithmType != default) ___h.Add(algorithmType.GetHashCode());
            if (!publicKey.IsEmpty) ___h.Add(global::Core.Base.Helpers.ObjectHelper.GetHashCode(publicKey.Span));
            return ___h.ToHashCode();
        });
    }

    public global::Core.RocketPack.Timestamp64 CreatedTime { get; }
    public global::Core.Cryptography.OmniAgreementAlgorithmType AlgorithmType { get; }
    public global::System.ReadOnlyMemory<byte> PublicKey { get; }

    public static global::Core.Cryptography.OmniAgreementPublicKey Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Core.Base.IBytesPool bytesPool)
    {
        var reader = new global::Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Core.Base.IBytesPool bytesPool)
    {
        var writer = new global::Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Core.Cryptography.OmniAgreementPublicKey? left, global::Core.Cryptography.OmniAgreementPublicKey? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Core.Cryptography.OmniAgreementPublicKey? left, global::Core.Cryptography.OmniAgreementPublicKey? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Core.Cryptography.OmniAgreementPublicKey) return false;
        return this.Equals((global::Core.Cryptography.OmniAgreementPublicKey)other);
    }
    public bool Equals(global::Core.Cryptography.OmniAgreementPublicKey? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.CreatedTime != target.CreatedTime) return false;
        if (this.AlgorithmType != target.AlgorithmType) return false;
        if (!global::Core.Base.BytesOperations.Equals(this.PublicKey.Span, target.PublicKey.Span)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Core.RocketPack.IRocketMessageFormatter<global::Core.Cryptography.OmniAgreementPublicKey>
    {
        public void Serialize(ref global::Core.RocketPack.RocketMessageWriter w, scoped in global::Core.Cryptography.OmniAgreementPublicKey value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.CreatedTime != global::Core.RocketPack.Timestamp64.Zero)
            {
                w.Write((uint)1);
                w.Write(value.CreatedTime);
            }
            if (value.AlgorithmType != (global::Core.Cryptography.OmniAgreementAlgorithmType)0)
            {
                w.Write((uint)2);
                w.Write((ulong)value.AlgorithmType);
            }
            if (!value.PublicKey.IsEmpty)
            {
                w.Write((uint)3);
                w.Write(value.PublicKey.Span);
            }
            w.Write((uint)0);
        }
        public global::Core.Cryptography.OmniAgreementPublicKey Deserialize(ref global::Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Core.RocketPack.Timestamp64 p_createdTime = global::Core.RocketPack.Timestamp64.Zero;
            global::Core.Cryptography.OmniAgreementAlgorithmType p_algorithmType = (global::Core.Cryptography.OmniAgreementAlgorithmType)0;
            global::System.ReadOnlyMemory<byte> p_publicKey = global::System.ReadOnlyMemory<byte>.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_createdTime = r.GetTimestamp64();
                            break;
                        }
                    case 2:
                        {
                            p_algorithmType = (global::Core.Cryptography.OmniAgreementAlgorithmType)r.GetUInt64();
                            break;
                        }
                    case 3:
                        {
                            p_publicKey = r.GetMemory(8192);
                            break;
                        }
                }
            }

            return new global::Core.Cryptography.OmniAgreementPublicKey(p_createdTime, p_algorithmType, p_publicKey);
        }
    }
}
public sealed partial class OmniAgreementPrivateKey : global::Core.RocketPack.IRocketMessage<global::Core.Cryptography.OmniAgreementPrivateKey>
{
    public static global::Core.RocketPack.IRocketMessageFormatter<global::Core.Cryptography.OmniAgreementPrivateKey> Formatter => global::Core.RocketPack.IRocketMessage<global::Core.Cryptography.OmniAgreementPrivateKey>.Formatter;
    public static global::Core.Cryptography.OmniAgreementPrivateKey Empty => global::Core.RocketPack.IRocketMessage<global::Core.Cryptography.OmniAgreementPrivateKey>.Empty;

    static OmniAgreementPrivateKey()
    {
        global::Core.RocketPack.IRocketMessage<global::Core.Cryptography.OmniAgreementPrivateKey>.Formatter = new ___CustomFormatter();
        global::Core.RocketPack.IRocketMessage<global::Core.Cryptography.OmniAgreementPrivateKey>.Empty = new global::Core.Cryptography.OmniAgreementPrivateKey(global::Core.RocketPack.Timestamp64.Zero, (global::Core.Cryptography.OmniAgreementAlgorithmType)0, global::System.ReadOnlyMemory<byte>.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxPrivateKeyLength = 8192;

    public OmniAgreementPrivateKey(global::Core.RocketPack.Timestamp64 createdTime, global::Core.Cryptography.OmniAgreementAlgorithmType algorithmType, global::System.ReadOnlyMemory<byte> privateKey)
    {
        if (privateKey.Length > 8192) throw new global::System.ArgumentOutOfRangeException("privateKey");

        this.CreatedTime = createdTime;
        this.AlgorithmType = algorithmType;
        this.PrivateKey = privateKey;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (createdTime != default) ___h.Add(createdTime.GetHashCode());
            if (algorithmType != default) ___h.Add(algorithmType.GetHashCode());
            if (!privateKey.IsEmpty) ___h.Add(global::Core.Base.Helpers.ObjectHelper.GetHashCode(privateKey.Span));
            return ___h.ToHashCode();
        });
    }

    public global::Core.RocketPack.Timestamp64 CreatedTime { get; }
    public global::Core.Cryptography.OmniAgreementAlgorithmType AlgorithmType { get; }
    public global::System.ReadOnlyMemory<byte> PrivateKey { get; }

    public static global::Core.Cryptography.OmniAgreementPrivateKey Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Core.Base.IBytesPool bytesPool)
    {
        var reader = new global::Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Core.Base.IBytesPool bytesPool)
    {
        var writer = new global::Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Core.Cryptography.OmniAgreementPrivateKey? left, global::Core.Cryptography.OmniAgreementPrivateKey? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Core.Cryptography.OmniAgreementPrivateKey? left, global::Core.Cryptography.OmniAgreementPrivateKey? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Core.Cryptography.OmniAgreementPrivateKey) return false;
        return this.Equals((global::Core.Cryptography.OmniAgreementPrivateKey)other);
    }
    public bool Equals(global::Core.Cryptography.OmniAgreementPrivateKey? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.CreatedTime != target.CreatedTime) return false;
        if (this.AlgorithmType != target.AlgorithmType) return false;
        if (!global::Core.Base.BytesOperations.Equals(this.PrivateKey.Span, target.PrivateKey.Span)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Core.RocketPack.IRocketMessageFormatter<global::Core.Cryptography.OmniAgreementPrivateKey>
    {
        public void Serialize(ref global::Core.RocketPack.RocketMessageWriter w, scoped in global::Core.Cryptography.OmniAgreementPrivateKey value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.CreatedTime != global::Core.RocketPack.Timestamp64.Zero)
            {
                w.Write((uint)1);
                w.Write(value.CreatedTime);
            }
            if (value.AlgorithmType != (global::Core.Cryptography.OmniAgreementAlgorithmType)0)
            {
                w.Write((uint)2);
                w.Write((ulong)value.AlgorithmType);
            }
            if (!value.PrivateKey.IsEmpty)
            {
                w.Write((uint)3);
                w.Write(value.PrivateKey.Span);
            }
            w.Write((uint)0);
        }
        public global::Core.Cryptography.OmniAgreementPrivateKey Deserialize(ref global::Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Core.RocketPack.Timestamp64 p_createdTime = global::Core.RocketPack.Timestamp64.Zero;
            global::Core.Cryptography.OmniAgreementAlgorithmType p_algorithmType = (global::Core.Cryptography.OmniAgreementAlgorithmType)0;
            global::System.ReadOnlyMemory<byte> p_privateKey = global::System.ReadOnlyMemory<byte>.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_createdTime = r.GetTimestamp64();
                            break;
                        }
                    case 2:
                        {
                            p_algorithmType = (global::Core.Cryptography.OmniAgreementAlgorithmType)r.GetUInt64();
                            break;
                        }
                    case 3:
                        {
                            p_privateKey = r.GetMemory(8192);
                            break;
                        }
                }
            }

            return new global::Core.Cryptography.OmniAgreementPrivateKey(p_createdTime, p_algorithmType, p_privateKey);
        }
    }
}
public sealed partial class OmniDigitalSignature : global::Core.RocketPack.IRocketMessage<global::Core.Cryptography.OmniDigitalSignature>
{
    public static global::Core.RocketPack.IRocketMessageFormatter<global::Core.Cryptography.OmniDigitalSignature> Formatter => global::Core.RocketPack.IRocketMessage<global::Core.Cryptography.OmniDigitalSignature>.Formatter;
    public static global::Core.Cryptography.OmniDigitalSignature Empty => global::Core.RocketPack.IRocketMessage<global::Core.Cryptography.OmniDigitalSignature>.Empty;

    static OmniDigitalSignature()
    {
        global::Core.RocketPack.IRocketMessage<global::Core.Cryptography.OmniDigitalSignature>.Formatter = new ___CustomFormatter();
        global::Core.RocketPack.IRocketMessage<global::Core.Cryptography.OmniDigitalSignature>.Empty = new global::Core.Cryptography.OmniDigitalSignature(global::Core.RocketPack.Utf8String.Empty, (global::Core.Cryptography.OmniDigitalSignatureAlgorithmType)0, global::System.ReadOnlyMemory<byte>.Empty, global::System.ReadOnlyMemory<byte>.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxNameLength = 32;
    public static readonly int MaxPublicKeyLength = 8192;
    public static readonly int MaxPrivateKeyLength = 8192;

    public OmniDigitalSignature(global::Core.RocketPack.Utf8String name, global::Core.Cryptography.OmniDigitalSignatureAlgorithmType algorithmType, global::System.ReadOnlyMemory<byte> publicKey, global::System.ReadOnlyMemory<byte> privateKey)
    {
        if (name is null) throw new global::System.ArgumentNullException("name");
        if (name.Length > 32) throw new global::System.ArgumentOutOfRangeException("name");
        if (publicKey.Length > 8192) throw new global::System.ArgumentOutOfRangeException("publicKey");
        if (privateKey.Length > 8192) throw new global::System.ArgumentOutOfRangeException("privateKey");

        this.Name = name;
        this.AlgorithmType = algorithmType;
        this.PublicKey = publicKey;
        this.PrivateKey = privateKey;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (!name.IsEmpty) ___h.Add(name.GetHashCode());
            if (algorithmType != default) ___h.Add(algorithmType.GetHashCode());
            if (!publicKey.IsEmpty) ___h.Add(global::Core.Base.Helpers.ObjectHelper.GetHashCode(publicKey.Span));
            if (!privateKey.IsEmpty) ___h.Add(global::Core.Base.Helpers.ObjectHelper.GetHashCode(privateKey.Span));
            return ___h.ToHashCode();
        });
    }

    public global::Core.RocketPack.Utf8String Name { get; }
    public global::Core.Cryptography.OmniDigitalSignatureAlgorithmType AlgorithmType { get; }
    public global::System.ReadOnlyMemory<byte> PublicKey { get; }
    public global::System.ReadOnlyMemory<byte> PrivateKey { get; }

    public static global::Core.Cryptography.OmniDigitalSignature Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Core.Base.IBytesPool bytesPool)
    {
        var reader = new global::Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Core.Base.IBytesPool bytesPool)
    {
        var writer = new global::Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Core.Cryptography.OmniDigitalSignature? left, global::Core.Cryptography.OmniDigitalSignature? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Core.Cryptography.OmniDigitalSignature? left, global::Core.Cryptography.OmniDigitalSignature? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Core.Cryptography.OmniDigitalSignature) return false;
        return this.Equals((global::Core.Cryptography.OmniDigitalSignature)other);
    }
    public bool Equals(global::Core.Cryptography.OmniDigitalSignature? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Name != target.Name) return false;
        if (this.AlgorithmType != target.AlgorithmType) return false;
        if (!global::Core.Base.BytesOperations.Equals(this.PublicKey.Span, target.PublicKey.Span)) return false;
        if (!global::Core.Base.BytesOperations.Equals(this.PrivateKey.Span, target.PrivateKey.Span)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Core.RocketPack.IRocketMessageFormatter<global::Core.Cryptography.OmniDigitalSignature>
    {
        public void Serialize(ref global::Core.RocketPack.RocketMessageWriter w, scoped in global::Core.Cryptography.OmniDigitalSignature value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Name != global::Core.RocketPack.Utf8String.Empty)
            {
                w.Write((uint)1);
                w.Write(value.Name);
            }
            if (value.AlgorithmType != (global::Core.Cryptography.OmniDigitalSignatureAlgorithmType)0)
            {
                w.Write((uint)2);
                w.Write((ulong)value.AlgorithmType);
            }
            if (!value.PublicKey.IsEmpty)
            {
                w.Write((uint)3);
                w.Write(value.PublicKey.Span);
            }
            if (!value.PrivateKey.IsEmpty)
            {
                w.Write((uint)4);
                w.Write(value.PrivateKey.Span);
            }
            w.Write((uint)0);
        }
        public global::Core.Cryptography.OmniDigitalSignature Deserialize(ref global::Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Core.RocketPack.Utf8String p_name = global::Core.RocketPack.Utf8String.Empty;
            global::Core.Cryptography.OmniDigitalSignatureAlgorithmType p_algorithmType = (global::Core.Cryptography.OmniDigitalSignatureAlgorithmType)0;
            global::System.ReadOnlyMemory<byte> p_publicKey = global::System.ReadOnlyMemory<byte>.Empty;
            global::System.ReadOnlyMemory<byte> p_privateKey = global::System.ReadOnlyMemory<byte>.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_name = r.GetString(32);
                            break;
                        }
                    case 2:
                        {
                            p_algorithmType = (global::Core.Cryptography.OmniDigitalSignatureAlgorithmType)r.GetUInt64();
                            break;
                        }
                    case 3:
                        {
                            p_publicKey = r.GetMemory(8192);
                            break;
                        }
                    case 4:
                        {
                            p_privateKey = r.GetMemory(8192);
                            break;
                        }
                }
            }

            return new global::Core.Cryptography.OmniDigitalSignature(p_name, p_algorithmType, p_publicKey, p_privateKey);
        }
    }
}
public sealed partial class OmniCertificate : global::Core.RocketPack.IRocketMessage<global::Core.Cryptography.OmniCertificate>
{
    public static global::Core.RocketPack.IRocketMessageFormatter<global::Core.Cryptography.OmniCertificate> Formatter => global::Core.RocketPack.IRocketMessage<global::Core.Cryptography.OmniCertificate>.Formatter;
    public static global::Core.Cryptography.OmniCertificate Empty => global::Core.RocketPack.IRocketMessage<global::Core.Cryptography.OmniCertificate>.Empty;

    static OmniCertificate()
    {
        global::Core.RocketPack.IRocketMessage<global::Core.Cryptography.OmniCertificate>.Formatter = new ___CustomFormatter();
        global::Core.RocketPack.IRocketMessage<global::Core.Cryptography.OmniCertificate>.Empty = new global::Core.Cryptography.OmniCertificate(global::Core.RocketPack.Utf8String.Empty, (global::Core.Cryptography.OmniDigitalSignatureAlgorithmType)0, global::System.ReadOnlyMemory<byte>.Empty, global::System.ReadOnlyMemory<byte>.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxNameLength = 32;
    public static readonly int MaxPublicKeyLength = 8192;
    public static readonly int MaxValueLength = 8192;

    public OmniCertificate(global::Core.RocketPack.Utf8String name, global::Core.Cryptography.OmniDigitalSignatureAlgorithmType algorithmType, global::System.ReadOnlyMemory<byte> publicKey, global::System.ReadOnlyMemory<byte> value)
    {
        if (name is null) throw new global::System.ArgumentNullException("name");
        if (name.Length > 32) throw new global::System.ArgumentOutOfRangeException("name");
        if (publicKey.Length > 8192) throw new global::System.ArgumentOutOfRangeException("publicKey");
        if (value.Length > 8192) throw new global::System.ArgumentOutOfRangeException("value");

        this.Name = name;
        this.AlgorithmType = algorithmType;
        this.PublicKey = publicKey;
        this.Value = value;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (!name.IsEmpty) ___h.Add(name.GetHashCode());
            if (algorithmType != default) ___h.Add(algorithmType.GetHashCode());
            if (!publicKey.IsEmpty) ___h.Add(global::Core.Base.Helpers.ObjectHelper.GetHashCode(publicKey.Span));
            if (!value.IsEmpty) ___h.Add(global::Core.Base.Helpers.ObjectHelper.GetHashCode(value.Span));
            return ___h.ToHashCode();
        });
    }

    public global::Core.RocketPack.Utf8String Name { get; }
    public global::Core.Cryptography.OmniDigitalSignatureAlgorithmType AlgorithmType { get; }
    public global::System.ReadOnlyMemory<byte> PublicKey { get; }
    public global::System.ReadOnlyMemory<byte> Value { get; }

    public static global::Core.Cryptography.OmniCertificate Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Core.Base.IBytesPool bytesPool)
    {
        var reader = new global::Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Core.Base.IBytesPool bytesPool)
    {
        var writer = new global::Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Core.Cryptography.OmniCertificate? left, global::Core.Cryptography.OmniCertificate? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Core.Cryptography.OmniCertificate? left, global::Core.Cryptography.OmniCertificate? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Core.Cryptography.OmniCertificate) return false;
        return this.Equals((global::Core.Cryptography.OmniCertificate)other);
    }
    public bool Equals(global::Core.Cryptography.OmniCertificate? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Name != target.Name) return false;
        if (this.AlgorithmType != target.AlgorithmType) return false;
        if (!global::Core.Base.BytesOperations.Equals(this.PublicKey.Span, target.PublicKey.Span)) return false;
        if (!global::Core.Base.BytesOperations.Equals(this.Value.Span, target.Value.Span)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Core.RocketPack.IRocketMessageFormatter<global::Core.Cryptography.OmniCertificate>
    {
        public void Serialize(ref global::Core.RocketPack.RocketMessageWriter w, scoped in global::Core.Cryptography.OmniCertificate value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Name != global::Core.RocketPack.Utf8String.Empty)
            {
                w.Write((uint)1);
                w.Write(value.Name);
            }
            if (value.AlgorithmType != (global::Core.Cryptography.OmniDigitalSignatureAlgorithmType)0)
            {
                w.Write((uint)2);
                w.Write((ulong)value.AlgorithmType);
            }
            if (!value.PublicKey.IsEmpty)
            {
                w.Write((uint)3);
                w.Write(value.PublicKey.Span);
            }
            if (!value.Value.IsEmpty)
            {
                w.Write((uint)4);
                w.Write(value.Value.Span);
            }
            w.Write((uint)0);
        }
        public global::Core.Cryptography.OmniCertificate Deserialize(ref global::Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Core.RocketPack.Utf8String p_name = global::Core.RocketPack.Utf8String.Empty;
            global::Core.Cryptography.OmniDigitalSignatureAlgorithmType p_algorithmType = (global::Core.Cryptography.OmniDigitalSignatureAlgorithmType)0;
            global::System.ReadOnlyMemory<byte> p_publicKey = global::System.ReadOnlyMemory<byte>.Empty;
            global::System.ReadOnlyMemory<byte> p_value = global::System.ReadOnlyMemory<byte>.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_name = r.GetString(32);
                            break;
                        }
                    case 2:
                        {
                            p_algorithmType = (global::Core.Cryptography.OmniDigitalSignatureAlgorithmType)r.GetUInt64();
                            break;
                        }
                    case 3:
                        {
                            p_publicKey = r.GetMemory(8192);
                            break;
                        }
                    case 4:
                        {
                            p_value = r.GetMemory(8192);
                            break;
                        }
                }
            }

            return new global::Core.Cryptography.OmniCertificate(p_name, p_algorithmType, p_publicKey, p_value);
        }
    }
}
public sealed partial class OmniSignature : global::Core.RocketPack.IRocketMessage<global::Core.Cryptography.OmniSignature>
{
    public static global::Core.RocketPack.IRocketMessageFormatter<global::Core.Cryptography.OmniSignature> Formatter => global::Core.RocketPack.IRocketMessage<global::Core.Cryptography.OmniSignature>.Formatter;
    public static global::Core.Cryptography.OmniSignature Empty => global::Core.RocketPack.IRocketMessage<global::Core.Cryptography.OmniSignature>.Empty;

    static OmniSignature()
    {
        global::Core.RocketPack.IRocketMessage<global::Core.Cryptography.OmniSignature>.Formatter = new ___CustomFormatter();
        global::Core.RocketPack.IRocketMessage<global::Core.Cryptography.OmniSignature>.Empty = new global::Core.Cryptography.OmniSignature(global::Core.RocketPack.Utf8String.Empty, global::Core.Cryptography.OmniHash.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxNameLength = 32;

    public OmniSignature(global::Core.RocketPack.Utf8String name, global::Core.Cryptography.OmniHash hash)
    {
        if (name is null) throw new global::System.ArgumentNullException("name");
        if (name.Length > 32) throw new global::System.ArgumentOutOfRangeException("name");
        this.Name = name;
        this.Hash = hash;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (!name.IsEmpty) ___h.Add(name.GetHashCode());
            if (hash != default) ___h.Add(hash.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Core.RocketPack.Utf8String Name { get; }
    public global::Core.Cryptography.OmniHash Hash { get; }

    public static global::Core.Cryptography.OmniSignature Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Core.Base.IBytesPool bytesPool)
    {
        var reader = new global::Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Core.Base.IBytesPool bytesPool)
    {
        var writer = new global::Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Core.Cryptography.OmniSignature? left, global::Core.Cryptography.OmniSignature? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Core.Cryptography.OmniSignature? left, global::Core.Cryptography.OmniSignature? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Core.Cryptography.OmniSignature) return false;
        return this.Equals((global::Core.Cryptography.OmniSignature)other);
    }
    public bool Equals(global::Core.Cryptography.OmniSignature? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.Name != target.Name) return false;
        if (this.Hash != target.Hash) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Core.RocketPack.IRocketMessageFormatter<global::Core.Cryptography.OmniSignature>
    {
        public void Serialize(ref global::Core.RocketPack.RocketMessageWriter w, scoped in global::Core.Cryptography.OmniSignature value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.Name != global::Core.RocketPack.Utf8String.Empty)
            {
                w.Write((uint)1);
                w.Write(value.Name);
            }
            if (value.Hash != global::Core.Cryptography.OmniHash.Empty)
            {
                w.Write((uint)2);
                global::Core.Cryptography.OmniHash.Formatter.Serialize(ref w, value.Hash, rank + 1);
            }
            w.Write((uint)0);
        }
        public global::Core.Cryptography.OmniSignature Deserialize(ref global::Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Core.RocketPack.Utf8String p_name = global::Core.RocketPack.Utf8String.Empty;
            global::Core.Cryptography.OmniHash p_hash = global::Core.Cryptography.OmniHash.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_name = r.GetString(32);
                            break;
                        }
                    case 2:
                        {
                            p_hash = global::Core.Cryptography.OmniHash.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                }
            }

            return new global::Core.Cryptography.OmniSignature(p_name, p_hash);
        }
    }
}
public sealed partial class OmniHashcash : global::Core.RocketPack.IRocketMessage<global::Core.Cryptography.OmniHashcash>
{
    public static global::Core.RocketPack.IRocketMessageFormatter<global::Core.Cryptography.OmniHashcash> Formatter => global::Core.RocketPack.IRocketMessage<global::Core.Cryptography.OmniHashcash>.Formatter;
    public static global::Core.Cryptography.OmniHashcash Empty => global::Core.RocketPack.IRocketMessage<global::Core.Cryptography.OmniHashcash>.Empty;

    static OmniHashcash()
    {
        global::Core.RocketPack.IRocketMessage<global::Core.Cryptography.OmniHashcash>.Formatter = new ___CustomFormatter();
        global::Core.RocketPack.IRocketMessage<global::Core.Cryptography.OmniHashcash>.Empty = new global::Core.Cryptography.OmniHashcash((global::Core.Cryptography.OmniHashcashAlgorithmType)0, global::System.ReadOnlyMemory<byte>.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxResultLength = 32;

    public OmniHashcash(global::Core.Cryptography.OmniHashcashAlgorithmType algorithmType, global::System.ReadOnlyMemory<byte> result)
    {
        if (result.Length > 32) throw new global::System.ArgumentOutOfRangeException("result");

        this.AlgorithmType = algorithmType;
        this.Result = result;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (algorithmType != default) ___h.Add(algorithmType.GetHashCode());
            if (!result.IsEmpty) ___h.Add(global::Core.Base.Helpers.ObjectHelper.GetHashCode(result.Span));
            return ___h.ToHashCode();
        });
    }

    public global::Core.Cryptography.OmniHashcashAlgorithmType AlgorithmType { get; }
    public global::System.ReadOnlyMemory<byte> Result { get; }

    public static global::Core.Cryptography.OmniHashcash Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Core.Base.IBytesPool bytesPool)
    {
        var reader = new global::Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Core.Base.IBytesPool bytesPool)
    {
        var writer = new global::Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Core.Cryptography.OmniHashcash? left, global::Core.Cryptography.OmniHashcash? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Core.Cryptography.OmniHashcash? left, global::Core.Cryptography.OmniHashcash? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Core.Cryptography.OmniHashcash) return false;
        return this.Equals((global::Core.Cryptography.OmniHashcash)other);
    }
    public bool Equals(global::Core.Cryptography.OmniHashcash? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.AlgorithmType != target.AlgorithmType) return false;
        if (!global::Core.Base.BytesOperations.Equals(this.Result.Span, target.Result.Span)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Core.RocketPack.IRocketMessageFormatter<global::Core.Cryptography.OmniHashcash>
    {
        public void Serialize(ref global::Core.RocketPack.RocketMessageWriter w, scoped in global::Core.Cryptography.OmniHashcash value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.AlgorithmType != (global::Core.Cryptography.OmniHashcashAlgorithmType)0)
            {
                w.Write((uint)1);
                w.Write((ulong)value.AlgorithmType);
            }
            if (!value.Result.IsEmpty)
            {
                w.Write((uint)2);
                w.Write(value.Result.Span);
            }
            w.Write((uint)0);
        }
        public global::Core.Cryptography.OmniHashcash Deserialize(ref global::Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Core.Cryptography.OmniHashcashAlgorithmType p_algorithmType = (global::Core.Cryptography.OmniHashcashAlgorithmType)0;
            global::System.ReadOnlyMemory<byte> p_result = global::System.ReadOnlyMemory<byte>.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_algorithmType = (global::Core.Cryptography.OmniHashcashAlgorithmType)r.GetUInt64();
                            break;
                        }
                    case 2:
                        {
                            p_result = r.GetMemory(32);
                            break;
                        }
                }
            }

            return new global::Core.Cryptography.OmniHashcash(p_algorithmType, p_result);
        }
    }
}
