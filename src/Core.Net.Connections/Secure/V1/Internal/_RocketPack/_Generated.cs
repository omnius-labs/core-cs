// <auto-generated/>
#nullable enable

namespace Core.Net.Connections.Secure.V1.Internal;

internal enum KeyExchangeAlgorithmType : byte
{
    Unknown = 0,
    EcDh_P521_Sha2_256 = 1,
}
internal enum KeyDerivationAlgorithmType : byte
{
    Unknown = 0,
    Pbkdf2 = 1,
}
internal enum HashAlgorithmType : byte
{
    Unknown = 0,
    Sha2_256 = 1,
}
internal enum CryptoAlgorithmType : byte
{
    Unknown = 0,
    Aes_Gcm_256 = 1,
}
internal enum AuthenticationType : byte
{
    None = 0,
    Signature = 1,
}
internal sealed partial class ProfileMessage : global::Core.RocketPack.IRocketMessage<global::Core.Net.Connections.Secure.V1.Internal.ProfileMessage>
{
    public static global::Core.RocketPack.IRocketMessageFormatter<global::Core.Net.Connections.Secure.V1.Internal.ProfileMessage> Formatter => global::Core.RocketPack.IRocketMessage<global::Core.Net.Connections.Secure.V1.Internal.ProfileMessage>.Formatter;
    public static global::Core.Net.Connections.Secure.V1.Internal.ProfileMessage Empty => global::Core.RocketPack.IRocketMessage<global::Core.Net.Connections.Secure.V1.Internal.ProfileMessage>.Empty;

    static ProfileMessage()
    {
        global::Core.RocketPack.IRocketMessage<global::Core.Net.Connections.Secure.V1.Internal.ProfileMessage>.Formatter = new ___CustomFormatter();
        global::Core.RocketPack.IRocketMessage<global::Core.Net.Connections.Secure.V1.Internal.ProfileMessage>.Empty = new global::Core.Net.Connections.Secure.V1.Internal.ProfileMessage(global::System.ReadOnlyMemory<byte>.Empty, (global::Core.Net.Connections.Secure.V1.Internal.AuthenticationType)0, global::System.Array.Empty<global::Core.Net.Connections.Secure.V1.Internal.KeyExchangeAlgorithmType>(), global::System.Array.Empty<global::Core.Net.Connections.Secure.V1.Internal.KeyDerivationAlgorithmType>(), global::System.Array.Empty<global::Core.Net.Connections.Secure.V1.Internal.CryptoAlgorithmType>(), global::System.Array.Empty<global::Core.Net.Connections.Secure.V1.Internal.HashAlgorithmType>());
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxSessionIdLength = 32;
    public static readonly int MaxKeyExchangeAlgorithmTypesCount = 32;
    public static readonly int MaxKeyDerivationAlgorithmTypesCount = 32;
    public static readonly int MaxCryptoAlgorithmTypesCount = 32;
    public static readonly int MaxHashAlgorithmTypesCount = 32;

    public ProfileMessage(global::System.ReadOnlyMemory<byte> sessionId, global::Core.Net.Connections.Secure.V1.Internal.AuthenticationType authenticationType, global::Core.Net.Connections.Secure.V1.Internal.KeyExchangeAlgorithmType[] keyExchangeAlgorithmTypes, global::Core.Net.Connections.Secure.V1.Internal.KeyDerivationAlgorithmType[] keyDerivationAlgorithmTypes, global::Core.Net.Connections.Secure.V1.Internal.CryptoAlgorithmType[] cryptoAlgorithmTypes, global::Core.Net.Connections.Secure.V1.Internal.HashAlgorithmType[] hashAlgorithmTypes)
    {
        if (sessionId.Length > 32) throw new global::System.ArgumentOutOfRangeException("sessionId");
        if (keyExchangeAlgorithmTypes is null) throw new global::System.ArgumentNullException("keyExchangeAlgorithmTypes");
        if (keyExchangeAlgorithmTypes.Length > 32) throw new global::System.ArgumentOutOfRangeException("keyExchangeAlgorithmTypes");
        if (keyDerivationAlgorithmTypes is null) throw new global::System.ArgumentNullException("keyDerivationAlgorithmTypes");
        if (keyDerivationAlgorithmTypes.Length > 32) throw new global::System.ArgumentOutOfRangeException("keyDerivationAlgorithmTypes");
        if (cryptoAlgorithmTypes is null) throw new global::System.ArgumentNullException("cryptoAlgorithmTypes");
        if (cryptoAlgorithmTypes.Length > 32) throw new global::System.ArgumentOutOfRangeException("cryptoAlgorithmTypes");
        if (hashAlgorithmTypes is null) throw new global::System.ArgumentNullException("hashAlgorithmTypes");
        if (hashAlgorithmTypes.Length > 32) throw new global::System.ArgumentOutOfRangeException("hashAlgorithmTypes");

        this.SessionId = sessionId;
        this.AuthenticationType = authenticationType;
        this.KeyExchangeAlgorithmTypes = new global::Core.Collections.ReadOnlyListSlim<global::Core.Net.Connections.Secure.V1.Internal.KeyExchangeAlgorithmType>(keyExchangeAlgorithmTypes);
        this.KeyDerivationAlgorithmTypes = new global::Core.Collections.ReadOnlyListSlim<global::Core.Net.Connections.Secure.V1.Internal.KeyDerivationAlgorithmType>(keyDerivationAlgorithmTypes);
        this.CryptoAlgorithmTypes = new global::Core.Collections.ReadOnlyListSlim<global::Core.Net.Connections.Secure.V1.Internal.CryptoAlgorithmType>(cryptoAlgorithmTypes);
        this.HashAlgorithmTypes = new global::Core.Collections.ReadOnlyListSlim<global::Core.Net.Connections.Secure.V1.Internal.HashAlgorithmType>(hashAlgorithmTypes);

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (!sessionId.IsEmpty) ___h.Add(global::Core.Base.Helpers.ObjectHelper.GetHashCode(sessionId.Span));
            if (authenticationType != default) ___h.Add(authenticationType.GetHashCode());
            foreach (var n in keyExchangeAlgorithmTypes)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            foreach (var n in keyDerivationAlgorithmTypes)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            foreach (var n in cryptoAlgorithmTypes)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            foreach (var n in hashAlgorithmTypes)
            {
                if (n != default) ___h.Add(n.GetHashCode());
            }
            return ___h.ToHashCode();
        });
    }

    public global::System.ReadOnlyMemory<byte> SessionId { get; }
    public global::Core.Net.Connections.Secure.V1.Internal.AuthenticationType AuthenticationType { get; }
    public global::Core.Collections.ReadOnlyListSlim<global::Core.Net.Connections.Secure.V1.Internal.KeyExchangeAlgorithmType> KeyExchangeAlgorithmTypes { get; }
    public global::Core.Collections.ReadOnlyListSlim<global::Core.Net.Connections.Secure.V1.Internal.KeyDerivationAlgorithmType> KeyDerivationAlgorithmTypes { get; }
    public global::Core.Collections.ReadOnlyListSlim<global::Core.Net.Connections.Secure.V1.Internal.CryptoAlgorithmType> CryptoAlgorithmTypes { get; }
    public global::Core.Collections.ReadOnlyListSlim<global::Core.Net.Connections.Secure.V1.Internal.HashAlgorithmType> HashAlgorithmTypes { get; }

    public static global::Core.Net.Connections.Secure.V1.Internal.ProfileMessage Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Core.Base.IBytesPool bytesPool)
    {
        var reader = new global::Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Core.Base.IBytesPool bytesPool)
    {
        var writer = new global::Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Core.Net.Connections.Secure.V1.Internal.ProfileMessage? left, global::Core.Net.Connections.Secure.V1.Internal.ProfileMessage? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Core.Net.Connections.Secure.V1.Internal.ProfileMessage? left, global::Core.Net.Connections.Secure.V1.Internal.ProfileMessage? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Core.Net.Connections.Secure.V1.Internal.ProfileMessage) return false;
        return this.Equals((global::Core.Net.Connections.Secure.V1.Internal.ProfileMessage)other);
    }
    public bool Equals(global::Core.Net.Connections.Secure.V1.Internal.ProfileMessage? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (!global::Core.Base.BytesOperations.Equals(this.SessionId.Span, target.SessionId.Span)) return false;
        if (this.AuthenticationType != target.AuthenticationType) return false;
        if (!global::Core.Base.Helpers.CollectionHelper.Equals(this.KeyExchangeAlgorithmTypes, target.KeyExchangeAlgorithmTypes)) return false;
        if (!global::Core.Base.Helpers.CollectionHelper.Equals(this.KeyDerivationAlgorithmTypes, target.KeyDerivationAlgorithmTypes)) return false;
        if (!global::Core.Base.Helpers.CollectionHelper.Equals(this.CryptoAlgorithmTypes, target.CryptoAlgorithmTypes)) return false;
        if (!global::Core.Base.Helpers.CollectionHelper.Equals(this.HashAlgorithmTypes, target.HashAlgorithmTypes)) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Core.RocketPack.IRocketMessageFormatter<global::Core.Net.Connections.Secure.V1.Internal.ProfileMessage>
    {
        public void Serialize(ref global::Core.RocketPack.RocketMessageWriter w, scoped in global::Core.Net.Connections.Secure.V1.Internal.ProfileMessage value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (!value.SessionId.IsEmpty)
            {
                w.Write((uint)1);
                w.Write(value.SessionId.Span);
            }
            if (value.AuthenticationType != (global::Core.Net.Connections.Secure.V1.Internal.AuthenticationType)0)
            {
                w.Write((uint)2);
                w.Write((ulong)value.AuthenticationType);
            }
            if (value.KeyExchangeAlgorithmTypes.Count != 0)
            {
                w.Write((uint)3);
                w.Write((uint)value.KeyExchangeAlgorithmTypes.Count);
                foreach (var n in value.KeyExchangeAlgorithmTypes)
                {
                    w.Write((ulong)n);
                }
            }
            if (value.KeyDerivationAlgorithmTypes.Count != 0)
            {
                w.Write((uint)4);
                w.Write((uint)value.KeyDerivationAlgorithmTypes.Count);
                foreach (var n in value.KeyDerivationAlgorithmTypes)
                {
                    w.Write((ulong)n);
                }
            }
            if (value.CryptoAlgorithmTypes.Count != 0)
            {
                w.Write((uint)5);
                w.Write((uint)value.CryptoAlgorithmTypes.Count);
                foreach (var n in value.CryptoAlgorithmTypes)
                {
                    w.Write((ulong)n);
                }
            }
            if (value.HashAlgorithmTypes.Count != 0)
            {
                w.Write((uint)6);
                w.Write((uint)value.HashAlgorithmTypes.Count);
                foreach (var n in value.HashAlgorithmTypes)
                {
                    w.Write((ulong)n);
                }
            }
            w.Write((uint)0);
        }
        public global::Core.Net.Connections.Secure.V1.Internal.ProfileMessage Deserialize(ref global::Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::System.ReadOnlyMemory<byte> p_sessionId = global::System.ReadOnlyMemory<byte>.Empty;
            global::Core.Net.Connections.Secure.V1.Internal.AuthenticationType p_authenticationType = (global::Core.Net.Connections.Secure.V1.Internal.AuthenticationType)0;
            global::Core.Net.Connections.Secure.V1.Internal.KeyExchangeAlgorithmType[] p_keyExchangeAlgorithmTypes = global::System.Array.Empty<global::Core.Net.Connections.Secure.V1.Internal.KeyExchangeAlgorithmType>();
            global::Core.Net.Connections.Secure.V1.Internal.KeyDerivationAlgorithmType[] p_keyDerivationAlgorithmTypes = global::System.Array.Empty<global::Core.Net.Connections.Secure.V1.Internal.KeyDerivationAlgorithmType>();
            global::Core.Net.Connections.Secure.V1.Internal.CryptoAlgorithmType[] p_cryptoAlgorithmTypes = global::System.Array.Empty<global::Core.Net.Connections.Secure.V1.Internal.CryptoAlgorithmType>();
            global::Core.Net.Connections.Secure.V1.Internal.HashAlgorithmType[] p_hashAlgorithmTypes = global::System.Array.Empty<global::Core.Net.Connections.Secure.V1.Internal.HashAlgorithmType>();

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_sessionId = r.GetMemory(32);
                            break;
                        }
                    case 2:
                        {
                            p_authenticationType = (global::Core.Net.Connections.Secure.V1.Internal.AuthenticationType)r.GetUInt64();
                            break;
                        }
                    case 3:
                        {
                            var length = r.GetUInt32();
                            p_keyExchangeAlgorithmTypes = new global::Core.Net.Connections.Secure.V1.Internal.KeyExchangeAlgorithmType[length];
                            for (int i = 0; i < p_keyExchangeAlgorithmTypes.Length; i++)
                            {
                                p_keyExchangeAlgorithmTypes[i] = (global::Core.Net.Connections.Secure.V1.Internal.KeyExchangeAlgorithmType)r.GetUInt64();
                            }
                            break;
                        }
                    case 4:
                        {
                            var length = r.GetUInt32();
                            p_keyDerivationAlgorithmTypes = new global::Core.Net.Connections.Secure.V1.Internal.KeyDerivationAlgorithmType[length];
                            for (int i = 0; i < p_keyDerivationAlgorithmTypes.Length; i++)
                            {
                                p_keyDerivationAlgorithmTypes[i] = (global::Core.Net.Connections.Secure.V1.Internal.KeyDerivationAlgorithmType)r.GetUInt64();
                            }
                            break;
                        }
                    case 5:
                        {
                            var length = r.GetUInt32();
                            p_cryptoAlgorithmTypes = new global::Core.Net.Connections.Secure.V1.Internal.CryptoAlgorithmType[length];
                            for (int i = 0; i < p_cryptoAlgorithmTypes.Length; i++)
                            {
                                p_cryptoAlgorithmTypes[i] = (global::Core.Net.Connections.Secure.V1.Internal.CryptoAlgorithmType)r.GetUInt64();
                            }
                            break;
                        }
                    case 6:
                        {
                            var length = r.GetUInt32();
                            p_hashAlgorithmTypes = new global::Core.Net.Connections.Secure.V1.Internal.HashAlgorithmType[length];
                            for (int i = 0; i < p_hashAlgorithmTypes.Length; i++)
                            {
                                p_hashAlgorithmTypes[i] = (global::Core.Net.Connections.Secure.V1.Internal.HashAlgorithmType)r.GetUInt64();
                            }
                            break;
                        }
                }
            }

            return new global::Core.Net.Connections.Secure.V1.Internal.ProfileMessage(p_sessionId, p_authenticationType, p_keyExchangeAlgorithmTypes, p_keyDerivationAlgorithmTypes, p_cryptoAlgorithmTypes, p_hashAlgorithmTypes);
        }
    }
}
internal sealed partial class VerificationMessage : global::Core.RocketPack.IRocketMessage<global::Core.Net.Connections.Secure.V1.Internal.VerificationMessage>
{
    public static global::Core.RocketPack.IRocketMessageFormatter<global::Core.Net.Connections.Secure.V1.Internal.VerificationMessage> Formatter => global::Core.RocketPack.IRocketMessage<global::Core.Net.Connections.Secure.V1.Internal.VerificationMessage>.Formatter;
    public static global::Core.Net.Connections.Secure.V1.Internal.VerificationMessage Empty => global::Core.RocketPack.IRocketMessage<global::Core.Net.Connections.Secure.V1.Internal.VerificationMessage>.Empty;

    static VerificationMessage()
    {
        global::Core.RocketPack.IRocketMessage<global::Core.Net.Connections.Secure.V1.Internal.VerificationMessage>.Formatter = new ___CustomFormatter();
        global::Core.RocketPack.IRocketMessage<global::Core.Net.Connections.Secure.V1.Internal.VerificationMessage>.Empty = new global::Core.Net.Connections.Secure.V1.Internal.VerificationMessage(global::Core.Net.Connections.Secure.V1.Internal.ProfileMessage.Empty, global::Core.Cryptography.OmniAgreementPublicKey.Empty);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public VerificationMessage(global::Core.Net.Connections.Secure.V1.Internal.ProfileMessage profileMessage, global::Core.Cryptography.OmniAgreementPublicKey agreementPublicKey)
    {
        if (profileMessage is null) throw new global::System.ArgumentNullException("profileMessage");
        if (agreementPublicKey is null) throw new global::System.ArgumentNullException("agreementPublicKey");

        this.ProfileMessage = profileMessage;
        this.AgreementPublicKey = agreementPublicKey;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (profileMessage != default) ___h.Add(profileMessage.GetHashCode());
            if (agreementPublicKey != default) ___h.Add(agreementPublicKey.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Core.Net.Connections.Secure.V1.Internal.ProfileMessage ProfileMessage { get; }
    public global::Core.Cryptography.OmniAgreementPublicKey AgreementPublicKey { get; }

    public static global::Core.Net.Connections.Secure.V1.Internal.VerificationMessage Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Core.Base.IBytesPool bytesPool)
    {
        var reader = new global::Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Core.Base.IBytesPool bytesPool)
    {
        var writer = new global::Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Core.Net.Connections.Secure.V1.Internal.VerificationMessage? left, global::Core.Net.Connections.Secure.V1.Internal.VerificationMessage? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Core.Net.Connections.Secure.V1.Internal.VerificationMessage? left, global::Core.Net.Connections.Secure.V1.Internal.VerificationMessage? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Core.Net.Connections.Secure.V1.Internal.VerificationMessage) return false;
        return this.Equals((global::Core.Net.Connections.Secure.V1.Internal.VerificationMessage)other);
    }
    public bool Equals(global::Core.Net.Connections.Secure.V1.Internal.VerificationMessage? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.ProfileMessage != target.ProfileMessage) return false;
        if (this.AgreementPublicKey != target.AgreementPublicKey) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Core.RocketPack.IRocketMessageFormatter<global::Core.Net.Connections.Secure.V1.Internal.VerificationMessage>
    {
        public void Serialize(ref global::Core.RocketPack.RocketMessageWriter w, scoped in global::Core.Net.Connections.Secure.V1.Internal.VerificationMessage value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.ProfileMessage != global::Core.Net.Connections.Secure.V1.Internal.ProfileMessage.Empty)
            {
                w.Write((uint)1);
                global::Core.Net.Connections.Secure.V1.Internal.ProfileMessage.Formatter.Serialize(ref w, value.ProfileMessage, rank + 1);
            }
            if (value.AgreementPublicKey != global::Core.Cryptography.OmniAgreementPublicKey.Empty)
            {
                w.Write((uint)2);
                global::Core.Cryptography.OmniAgreementPublicKey.Formatter.Serialize(ref w, value.AgreementPublicKey, rank + 1);
            }
            w.Write((uint)0);
        }
        public global::Core.Net.Connections.Secure.V1.Internal.VerificationMessage Deserialize(ref global::Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Core.Net.Connections.Secure.V1.Internal.ProfileMessage p_profileMessage = global::Core.Net.Connections.Secure.V1.Internal.ProfileMessage.Empty;
            global::Core.Cryptography.OmniAgreementPublicKey p_agreementPublicKey = global::Core.Cryptography.OmniAgreementPublicKey.Empty;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_profileMessage = global::Core.Net.Connections.Secure.V1.Internal.ProfileMessage.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                    case 2:
                        {
                            p_agreementPublicKey = global::Core.Cryptography.OmniAgreementPublicKey.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                }
            }

            return new global::Core.Net.Connections.Secure.V1.Internal.VerificationMessage(p_profileMessage, p_agreementPublicKey);
        }
    }
}
internal sealed partial class AuthenticationMessage : global::Core.RocketPack.IRocketMessage<global::Core.Net.Connections.Secure.V1.Internal.AuthenticationMessage>
{
    public static global::Core.RocketPack.IRocketMessageFormatter<global::Core.Net.Connections.Secure.V1.Internal.AuthenticationMessage> Formatter => global::Core.RocketPack.IRocketMessage<global::Core.Net.Connections.Secure.V1.Internal.AuthenticationMessage>.Formatter;
    public static global::Core.Net.Connections.Secure.V1.Internal.AuthenticationMessage Empty => global::Core.RocketPack.IRocketMessage<global::Core.Net.Connections.Secure.V1.Internal.AuthenticationMessage>.Empty;

    static AuthenticationMessage()
    {
        global::Core.RocketPack.IRocketMessage<global::Core.Net.Connections.Secure.V1.Internal.AuthenticationMessage>.Formatter = new ___CustomFormatter();
        global::Core.RocketPack.IRocketMessage<global::Core.Net.Connections.Secure.V1.Internal.AuthenticationMessage>.Empty = new global::Core.Net.Connections.Secure.V1.Internal.AuthenticationMessage(global::Core.RocketPack.Timestamp64.Zero, global::System.ReadOnlyMemory<byte>.Empty, null);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public static readonly int MaxHashLength = 32;

    public AuthenticationMessage(global::Core.RocketPack.Timestamp64 createdTime, global::System.ReadOnlyMemory<byte> hash, global::Core.Cryptography.OmniCertificate? certificate)
    {
        if (hash.Length > 32) throw new global::System.ArgumentOutOfRangeException("hash");
        this.CreatedTime = createdTime;
        this.Hash = hash;
        this.Certificate = certificate;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (createdTime != default) ___h.Add(createdTime.GetHashCode());
            if (!hash.IsEmpty) ___h.Add(global::Core.Base.Helpers.ObjectHelper.GetHashCode(hash.Span));
            if (certificate != default) ___h.Add(certificate.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public global::Core.RocketPack.Timestamp64 CreatedTime { get; }
    public global::System.ReadOnlyMemory<byte> Hash { get; }
    public global::Core.Cryptography.OmniCertificate? Certificate { get; }

    public static global::Core.Net.Connections.Secure.V1.Internal.AuthenticationMessage Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Core.Base.IBytesPool bytesPool)
    {
        var reader = new global::Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Core.Base.IBytesPool bytesPool)
    {
        var writer = new global::Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Core.Net.Connections.Secure.V1.Internal.AuthenticationMessage? left, global::Core.Net.Connections.Secure.V1.Internal.AuthenticationMessage? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Core.Net.Connections.Secure.V1.Internal.AuthenticationMessage? left, global::Core.Net.Connections.Secure.V1.Internal.AuthenticationMessage? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Core.Net.Connections.Secure.V1.Internal.AuthenticationMessage) return false;
        return this.Equals((global::Core.Net.Connections.Secure.V1.Internal.AuthenticationMessage)other);
    }
    public bool Equals(global::Core.Net.Connections.Secure.V1.Internal.AuthenticationMessage? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.CreatedTime != target.CreatedTime) return false;
        if (!global::Core.Base.BytesOperations.Equals(this.Hash.Span, target.Hash.Span)) return false;
        if ((this.Certificate is null) != (target.Certificate is null)) return false;
        if ((this.Certificate is not null) && (target.Certificate is not null) && this.Certificate != target.Certificate) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Core.RocketPack.IRocketMessageFormatter<global::Core.Net.Connections.Secure.V1.Internal.AuthenticationMessage>
    {
        public void Serialize(ref global::Core.RocketPack.RocketMessageWriter w, scoped in global::Core.Net.Connections.Secure.V1.Internal.AuthenticationMessage value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.CreatedTime != global::Core.RocketPack.Timestamp64.Zero)
            {
                w.Write((uint)1);
                w.Write(value.CreatedTime);
            }
            if (!value.Hash.IsEmpty)
            {
                w.Write((uint)2);
                w.Write(value.Hash.Span);
            }
            if (value.Certificate != null)
            {
                w.Write((uint)3);
                global::Core.Cryptography.OmniCertificate.Formatter.Serialize(ref w, value.Certificate, rank + 1);
            }
            w.Write((uint)0);
        }
        public global::Core.Net.Connections.Secure.V1.Internal.AuthenticationMessage Deserialize(ref global::Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            global::Core.RocketPack.Timestamp64 p_createdTime = global::Core.RocketPack.Timestamp64.Zero;
            global::System.ReadOnlyMemory<byte> p_hash = global::System.ReadOnlyMemory<byte>.Empty;
            global::Core.Cryptography.OmniCertificate? p_certificate = null;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_createdTime = r.GetTimestamp64();
                            break;
                        }
                    case 2:
                        {
                            p_hash = r.GetMemory(32);
                            break;
                        }
                    case 3:
                        {
                            p_certificate = global::Core.Cryptography.OmniCertificate.Formatter.Deserialize(ref r, rank + 1);
                            break;
                        }
                }
            }

            return new global::Core.Net.Connections.Secure.V1.Internal.AuthenticationMessage(p_createdTime, p_hash, p_certificate);
        }
    }
}
