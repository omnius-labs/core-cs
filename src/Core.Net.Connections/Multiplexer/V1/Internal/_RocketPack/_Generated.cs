// <auto-generated/>
#nullable enable

namespace Omnius.Core.Net.Connections.Multiplexer.V1.Internal;

internal sealed partial class ProfileMessage : global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Core.Net.Connections.Multiplexer.V1.Internal.ProfileMessage>
{
    public static global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Core.Net.Connections.Multiplexer.V1.Internal.ProfileMessage> Formatter => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Core.Net.Connections.Multiplexer.V1.Internal.ProfileMessage>.Formatter;
    public static global::Omnius.Core.Net.Connections.Multiplexer.V1.Internal.ProfileMessage Empty => global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Core.Net.Connections.Multiplexer.V1.Internal.ProfileMessage>.Empty;

    static ProfileMessage()
    {
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Core.Net.Connections.Multiplexer.V1.Internal.ProfileMessage>.Formatter = new ___CustomFormatter();
        global::Omnius.Core.RocketPack.IRocketMessage<global::Omnius.Core.Net.Connections.Multiplexer.V1.Internal.ProfileMessage>.Empty = new global::Omnius.Core.Net.Connections.Multiplexer.V1.Internal.ProfileMessage(0, 0, 0, 0);
    }

    private readonly global::System.Lazy<int> ___hashCode;

    public ProfileMessage(uint packetReceiveTimeoutMilliseconds, uint maxStreamRequestQueueSize, uint maxStreamDataSize, uint maxStreamDataQueueSize)
    {
        this.PacketReceiveTimeoutMilliseconds = packetReceiveTimeoutMilliseconds;
        this.MaxStreamRequestQueueSize = maxStreamRequestQueueSize;
        this.MaxStreamDataSize = maxStreamDataSize;
        this.MaxStreamDataQueueSize = maxStreamDataQueueSize;

        ___hashCode = new global::System.Lazy<int>(() =>
        {
            var ___h = new global::System.HashCode();
            if (packetReceiveTimeoutMilliseconds != default) ___h.Add(packetReceiveTimeoutMilliseconds.GetHashCode());
            if (maxStreamRequestQueueSize != default) ___h.Add(maxStreamRequestQueueSize.GetHashCode());
            if (maxStreamDataSize != default) ___h.Add(maxStreamDataSize.GetHashCode());
            if (maxStreamDataQueueSize != default) ___h.Add(maxStreamDataQueueSize.GetHashCode());
            return ___h.ToHashCode();
        });
    }

    public uint PacketReceiveTimeoutMilliseconds { get; }
    public uint MaxStreamRequestQueueSize { get; }
    public uint MaxStreamDataSize { get; }
    public uint MaxStreamDataQueueSize { get; }

    public static global::Omnius.Core.Net.Connections.Multiplexer.V1.Internal.ProfileMessage Import(global::System.Buffers.ReadOnlySequence<byte> sequence, global::Omnius.Core.Base.IBytesPool bytesPool)
    {
        var reader = new global::Omnius.Core.RocketPack.RocketMessageReader(sequence, bytesPool);
        return Formatter.Deserialize(ref reader, 0);
    }
    public void Export(global::System.Buffers.IBufferWriter<byte> bufferWriter, global::Omnius.Core.Base.IBytesPool bytesPool)
    {
        var writer = new global::Omnius.Core.RocketPack.RocketMessageWriter(bufferWriter, bytesPool);
        Formatter.Serialize(ref writer, this, 0);
    }

    public static bool operator ==(global::Omnius.Core.Net.Connections.Multiplexer.V1.Internal.ProfileMessage? left, global::Omnius.Core.Net.Connections.Multiplexer.V1.Internal.ProfileMessage? right)
    {
        return (right is null) ? (left is null) : right.Equals(left);
    }
    public static bool operator !=(global::Omnius.Core.Net.Connections.Multiplexer.V1.Internal.ProfileMessage? left, global::Omnius.Core.Net.Connections.Multiplexer.V1.Internal.ProfileMessage? right)
    {
        return !(left == right);
    }
    public override bool Equals(object? other)
    {
        if (other is not global::Omnius.Core.Net.Connections.Multiplexer.V1.Internal.ProfileMessage) return false;
        return this.Equals((global::Omnius.Core.Net.Connections.Multiplexer.V1.Internal.ProfileMessage)other);
    }
    public bool Equals(global::Omnius.Core.Net.Connections.Multiplexer.V1.Internal.ProfileMessage? target)
    {
        if (target is null) return false;
        if (object.ReferenceEquals(this, target)) return true;
        if (this.PacketReceiveTimeoutMilliseconds != target.PacketReceiveTimeoutMilliseconds) return false;
        if (this.MaxStreamRequestQueueSize != target.MaxStreamRequestQueueSize) return false;
        if (this.MaxStreamDataSize != target.MaxStreamDataSize) return false;
        if (this.MaxStreamDataQueueSize != target.MaxStreamDataQueueSize) return false;

        return true;
    }
    public override int GetHashCode() => ___hashCode.Value;

    private sealed class ___CustomFormatter : global::Omnius.Core.RocketPack.IRocketMessageFormatter<global::Omnius.Core.Net.Connections.Multiplexer.V1.Internal.ProfileMessage>
    {
        public void Serialize(ref global::Omnius.Core.RocketPack.RocketMessageWriter w, scoped in global::Omnius.Core.Net.Connections.Multiplexer.V1.Internal.ProfileMessage value, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            if (value.PacketReceiveTimeoutMilliseconds != 0)
            {
                w.Write((uint)1);
                w.Write(value.PacketReceiveTimeoutMilliseconds);
            }
            if (value.MaxStreamRequestQueueSize != 0)
            {
                w.Write((uint)2);
                w.Write(value.MaxStreamRequestQueueSize);
            }
            if (value.MaxStreamDataSize != 0)
            {
                w.Write((uint)3);
                w.Write(value.MaxStreamDataSize);
            }
            if (value.MaxStreamDataQueueSize != 0)
            {
                w.Write((uint)4);
                w.Write(value.MaxStreamDataQueueSize);
            }
            w.Write((uint)0);
        }
        public global::Omnius.Core.Net.Connections.Multiplexer.V1.Internal.ProfileMessage Deserialize(ref global::Omnius.Core.RocketPack.RocketMessageReader r, scoped in int rank)
        {
            if (rank > 256) throw new global::System.FormatException();

            uint p_packetReceiveTimeoutMilliseconds = 0;
            uint p_maxStreamRequestQueueSize = 0;
            uint p_maxStreamDataSize = 0;
            uint p_maxStreamDataQueueSize = 0;

            for (; ; )
            {
                uint id = r.GetUInt32();
                if (id == 0) break;
                switch (id)
                {
                    case 1:
                        {
                            p_packetReceiveTimeoutMilliseconds = r.GetUInt32();
                            break;
                        }
                    case 2:
                        {
                            p_maxStreamRequestQueueSize = r.GetUInt32();
                            break;
                        }
                    case 3:
                        {
                            p_maxStreamDataSize = r.GetUInt32();
                            break;
                        }
                    case 4:
                        {
                            p_maxStreamDataQueueSize = r.GetUInt32();
                            break;
                        }
                }
            }

            return new global::Omnius.Core.Net.Connections.Multiplexer.V1.Internal.ProfileMessage(p_packetReceiveTimeoutMilliseconds, p_maxStreamRequestQueueSize, p_maxStreamDataSize, p_maxStreamDataQueueSize);
        }
    }
}
